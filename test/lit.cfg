# -*- Python -*-
# Config for 'lit' test runner

import os
import lit
import sys
import subprocess
from threading import Thread

from Queue import Queue, Empty

class CxxTests(object):
    def __init__(self, cxx = None, cxxflags = None, dir = None):
        self.cxx = cxx
        self.cxxflags = cxxflags
        self.dir = dir

    def checkVars(self, litConfig, localConfig):
        if self.cxx is None:
            # blank here is an error
            self.cxx = localConfig.environment['CXX']
        if self.cxxflags is None:
            # blank is not an error here
            self.cxxflags = localConfig.environment['CXXFLAGS'] or ''

        if self.cxx is None:
            litConfig.fatal('cxx compiler unknown, cannot compile')

    def getTestsInDirectory(self, testSuite, path_in_suite, litConfig, localConfig):
        self.checkVars(litConfig, localConfig)

        dir = self.dir
        if dir is None:
            dir = testSuite.getSourcePath(path_in_suite)

        for dirname,subdirs,filenames in os.walk(dir):
            subdirs[:] = []

            for filename in filenames:
                if (filename.startswith('.')
                        or filename in localConfig.excludes
                        or not filename.endswith(tuple(localConfig.suffixes))
                        ):
                    continue

                path = os.path.join(dirname, filename)
                suffix = path[len(dir):]
                if suffix.startswith(os.sep):
                    suffix = suffix[1:]

                path = os.path.join(*(list(path_in_suite) + suffix.split(os.sep)))

                test = lit.Test.Test(
                    testSuite, path.split(os.sep), localConfig,
                    os.path.join(localConfig.test_exec_root, path.replace(os.sep, '..')) + '.exe')
                test.source_path = os.path.join(localConfig.test_source_root, path)

                if filename.endswith('.fail.cpp'):
                    test.xfails = ['*']
                # FIXME: Hack?
                # test.source_path = path
                yield test

    @staticmethod
    def enqueuePipe(out, queue):
        for line in iter(out.readline, b''):
            queue.put(line)
        out.close()

    @staticmethod
    def runCommandAndLog(command, env = None):
        """
        Run given command and produce output

        returns a tuple
         0 - the return code
         1 - a list of lines output, with '1> ' or '2> ' prepended to indicate the stream
        """
        diags = []
        ps = subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE,
                env = env, universal_newlines = True)

        outq = Queue()
        outt = Thread(target = CxxTests.enqueuePipe, args = (ps.stdout, outq))
        outt.daemon = True

        errq = Queue()
        errt = Thread(target = CxxTests.enqueuePipe, args = (ps.stderr, errq))
        errt.daemon = True

        outt.start()
        errt.start()

        while ps.poll() is None:
            # get stdout first
            while True:
                try:
                    line = outq.get_nowait()
                except Empty:
                    break
                else:
                    diags.append('1> ' + line)
            # now get stderr
            while True:
                try:
                    line = errq.get_nowait()
                except Empty:
                    break
                else:
                    diags.append('2> ' + line)

        ps.wait()

        while not outq.empty():
            diags.append('1> ' + outq.get_nowait())

        while not errq.empty():
            diags.append('2> ' + errq.get_nowait())

        return (ps.returncode, diags)



    def execute(self, test, litConfig):
        if test.config.unsupported:
            return lit.Test.UNSUPPORTED,'Test is not supported'

        command = '%s %s "%s" -o "%s"' % (self.cxx, self.cxxflags, test.source_path, test.file_path)

        cxx_code,cxx_diags = CxxTests.runCommandAndLog(command, env = test.suite.config.environment)

        report = '\tcompilation %s: %s\n' % ("failed" if cxx_code else "success", os.path.join(*test.path_in_suite))
        report += '\treturn code: %d\n' % cxx_code
        report += '%s' % ''.join(cxx_diags)

        if cxx_code or cxx_diags:
            return lit.Test.FAIL,report

        if test.isExpectedToFail():
            return lit.Test.PASS,report

        cmd_code,cmd_diags = CxxTests.runCommandAndLog(test.file_path, env = test.suite.config.environment)

        report = '\texecution %s: %s\n' % ("failed" if cxx_code else "success", test.file_path)
        report += '\treturn code: %d\n' % cmd_code
        report += '%s' % ''.join(cmd_diags)

        if cmd_code or cmd_diags:
            return lit.Test.FAIL,report

        return lit.Test.PASS,report


# name: The name of this test suite
config.name = 'ring-buffer'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.pass.cpp', '.fail.cpp']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests are located.
config.test_exec_root = os.path.normpath(os.path.join(os.path.dirname(__file__), '../bin'))

config.test_format = CxxTests()

config.environment['CXX'] = os.environ['CXX']
config.environment['CXXFLAGS'] = os.environ.get('CXXFLAGS') or os.environ.get('CFLAGS') or ''
config.environment['CXXFLAGS'] += ' -I"' + os.path.join(os.path.dirname(__file__), '..') + '"'

config.environment['INCLUDE'] = os.environ['INCLUDE']
config.environment['LIB'] = os.environ['LIB']


# import re
# import tempfile
#
# class OneCommandPerFileTest(TestFormat):
#     # FIXME: Refactor into generic test for running some command on a directory
#     # of inputs.
#
#     def __init__(self, command, dir, recursive=False,
#                  pattern=".*", useTempInput=False):
#         if isinstance(command, str):
#             self.command = [command]
#         else:
#             self.command = list(command)
#         if dir is not None:
#             dir = str(dir)
#         self.dir = dir
#         self.recursive = bool(recursive)
#         self.pattern = re.compile(pattern)
#         self.useTempInput = useTempInput
#
#     def getTestsInDirectory(self, testSuite, path_in_suite,
#                             litConfig, localConfig):
#         dir = self.dir
#         if dir is None:
#             dir = testSuite.getSourcePath(path_in_suite)
#
#         for dirname,subdirs,filenames in os.walk(dir):
#             if not self.recursive:
#                 subdirs[:] = []
#
#             subdirs[:] = [d for d in subdirs
#                           if (d != '.svn' and
#                               d not in localConfig.excludes)]
#
#             for filename in filenames:
#                 if (filename.startswith('.') or
#                     not self.pattern.match(filename) or
#                     filename in localConfig.excludes):
#                     continue
#
#                 path = os.path.join(dirname,filename)
#                 suffix = path[len(dir):]
#                 if suffix.startswith(os.sep):
#                     suffix = suffix[1:]
#                 test = lit.Test.Test(
#                     testSuite, path_in_suite + tuple(suffix.split(os.sep)),
#                     localConfig)
#                 # FIXME: Hack?
#                 test.source_path = path
#                 yield test
#
#     def createTempInput(self, tmp, test):
#         raise NotImplementedError('This is an abstract method.')
#
#     def execute(self, test, litConfig):
#         if test.config.unsupported:
#             return (lit.Test.UNSUPPORTED, 'Test is unsupported')
#
#         cmd = list(self.command)
#
#         # If using temp input, create a temporary file and hand it to the
#         # subclass.
#         if self.useTempInput:
#             tmp = tempfile.NamedTemporaryFile(suffix='.cpp')
#             self.createTempInput(tmp, test)
#             tmp.flush()
#             cmd.append(tmp.name)
#         elif hasattr(test, 'source_path'):
#             cmd.append(test.source_path)
#         else:
#             cmd.append(test.getSourcePath())
#
#         out, err, exitCode = lit.util.executeCommand(cmd)
#
#         diags = out + err
#         if not exitCode and not diags.strip():
#             return lit.Test.PASS,''
#
#         # Try to include some useful information.
#         report = """Command: %s\n""" % ' '.join(["'%s'" % a
#                                                  for a in cmd])
#         if self.useTempInput:
#             report += """Temporary File: %s\n""" % tmp.name
#             report += "--\n%s--\n""" % open(tmp.name).read()
#         report += """Output:\n--\n%s--""" % diags
#
#         return lit.Test.FAIL, report
